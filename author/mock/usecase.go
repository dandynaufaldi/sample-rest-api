// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dandynaufaldi/sample-rest-api/author (interfaces: Usecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/dandynaufaldi/sample-rest-api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// FetchArticle mocks base method
func (m *MockUsecase) FetchArticle(arg0 context.Context, arg1, arg2, arg3 int64) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticle", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArticle indicates an expected call of FetchArticle
func (mr *MockUsecaseMockRecorder) FetchArticle(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticle", reflect.TypeOf((*MockUsecase)(nil).FetchArticle), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method
func (m *MockUsecase) GetByID(arg0 context.Context, arg1 int64) (*models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUsecaseMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecase)(nil).GetByID), arg0, arg1)
}
